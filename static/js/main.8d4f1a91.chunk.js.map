{"version":3,"sources":["components/TextField.js","components/Shuffle.js","components/Deck.js","components/GamePlay.js","components/PlayCard.js","components/Darot.js","App.js","index.js"],"names":["TextField","_ref","fieldName","props","_objectWithoutProperties","_excluded","obj","name","location","_objectSpread","SomethingElse","concat","_jsxs","children","_jsx","type","id","Shuffle","deck","i","length","swapIndex","Math","floor","random","currentCard","cardToSwap","GamePlays","PlayCardHead","title","className","PlayCard","_ref2","cardType","_useState","useState","_useState2","_slicedToArray","isActive","setIsActive","tarotCard","img","React","Fragment","onClick","event","current","style","backgroundImage","Darot","GamePlay","HandSize","formData","setFormData","valueUpdated","e","_defineProperty","target","value","cardCursor","undefined","Explanations","Deck","slice","map","card","question","CardQuestion","quote","quoteSource","CardQuoteContent","meaning","statement","label","lifeExamples","Hand","DarotBoard","onChange","App","Name","Location","NavDarot","Nav","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.8d4f1a91.chunk.js","sourcesContent":["// function TextField(props) {...}\r\nconst TextField = ({ fieldName, ...props }) => {\r\n  // Playing with destructuring...\r\n  const obj = {\r\n    name: \"Fred\",\r\n    location: \"New York\"\r\n  };\r\n\r\n  const otherObj = {\r\n    ...obj,\r\n    SomethingElse: \"Another ...\"\r\n  };\r\n\r\n  const { name } = obj;\r\n\r\n  //  console.log(\"Data\", { name, obj, otherObj, isSame: obj === otherObj, });\r\n\r\n  const list1 = [1, 2, 3, 4, 5];\r\n  // add 6\r\n  const list2 = [...list1, 6];\r\n\r\n  return (\r\n    <fieldset>\r\n      <label>{fieldName}</label>\r\n      <input type=\"textbox\" id={fieldName} name={fieldName} {...props} />\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n","const Shuffle = (deck) => {\r\n  for (var i = deck.length - 1; i > 0; i--) {\r\n    const swapIndex = Math.floor(Math.random() * (i + 1));\r\n    const currentCard = deck[i];\r\n    const cardToSwap = deck[swapIndex];\r\n    deck[i] = cardToSwap;\r\n    deck[swapIndex] = currentCard;\r\n  }\r\n  return deck;\r\n};\r\nexport default Shuffle;\r\n","import deck from \"../data/deck.json\";\r\n/*\r\nimport { useState } from \"react\";\r\nimport {useParams} from 'react-router-dom';\r\nconst {id} = useParams();\r\n*/\r\nimport Shuffle from \"../components/Shuffle\";\r\nexport default Shuffle(deck);\r\n","import GamePlays from \"../data/gameplay.json\";\r\nexport default GamePlays;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"../css/PlayCard.css\";\r\n\r\nconst PlayCardHead = ({ title }) => {\r\n  return <div className=\"play-card-title\">{title}</div>;\r\n};\r\n\r\nlet PlayCardCount = 0;\r\nconst PlayCard = ({ cardType, ...props }) => {\r\n  const obj = props.obj;\r\n  const [isActive, setIsActive] = useState(false);\r\n  const handleClick = (event) => {\r\n    setIsActive((current) => !current);\r\n  };\r\n  let title = obj.name;\r\n  if (title === \"\") {\r\n    title = obj.tarotCard;\r\n  }\r\n  if (!obj.img) {\r\n    obj.img = \"\";\r\n  }\r\n  let randPick = Math.floor(Math.random() * 10);\r\n  let reverse = false;\r\n  if (randPick > 5) {\r\n    // reverse = true;\r\n  }\r\n  PlayCardCount++;\r\n  // key={_.uniqueId()}\r\n  // console.log(\"PlayCard\", obj);\r\n  return (\r\n    <React.Fragment key={obj.id}>\r\n      <div\r\n        className={isActive ? \"play-card flip\" : \"play-card\"}\r\n        onClick={handleClick}\r\n      >\r\n        <div className=\"play-card-inner\">\r\n          <div className=\"play-card-front\">\r\n            <div className=\"play-card-front-title\">{cardType}</div>\r\n          </div>\r\n          <div\r\n            className={reverse ? \"play-card-back reverse\" : \"play-card-back\"}\r\n            style={{ backgroundImage: \"url(\" + obj.img + \")\" }}\r\n          >\r\n            <PlayCardHead title={title} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default PlayCard;\r\n","import { useState } from \"react\";\r\nimport TextField from \"./TextField\";\r\nimport Deck from \"./Deck\";\r\nimport GamePlays from \"./GamePlay\";\r\nimport PlayCard from \"./PlayCard\";\r\n\r\nconst Darot = () => {\r\n  // Form\r\n  const [formData, setFormData] = useState({\r\n    GamePlay: 1,\r\n    HandSize: 2\r\n  });\r\n  const valueUpdated = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  // Game Format\r\n  let cardCursor = 0;\r\n  let GamePlay;\r\n  if (\r\n    GamePlays[formData.GamePlay] !== undefined &&\r\n    GamePlays[formData.GamePlay].length > 0\r\n  ) {\r\n    formData.HandSize = GamePlays[formData.GamePlay].length;\r\n    /* canDraw = false; */\r\n    cardCursor = 0;\r\n    GamePlay = GamePlays[formData.GamePlay];\r\n  }\r\n\r\n  // Card Question\r\n  const CardQuestion = (question) => {\r\n    return (\r\n      <div className=\"explanation-question\">\r\n        <br />\r\n        <i className=\"question\">{question}</i>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Card Quote\r\n  const CardQuoteContent = (quote, quoteSource) => {\r\n    return (\r\n      <div className=\"explanation-quote\">\r\n        <br />\r\n        <div className=\"quote-content\">\r\n          <i className=\"fa fa-quote-left fa-2x fa-pull-left\"></i>\r\n          <i className=\"fa fa-quote-right fa-2x fa-pull-right\"></i>\r\n          {quote}\r\n        </div>\r\n        <br />- <i>{quoteSource}</i>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Explanation\r\n  const Explanations = Deck.slice(0, formData.HandSize).map((card, id) => {\r\n    // console.log(card);\r\n    if (GamePlays[formData.GamePlay] === undefined) {\r\n      return;\r\n    }\r\n    let title = card.name;\r\n    if (title === \"\") {\r\n      title = card.tarotCard;\r\n    }\r\n    let question = \"\";\r\n    if (card.question !== \"\") {\r\n      question = CardQuestion(card.question);\r\n    }\r\n    let quote = \"\";\r\n    if (card.quote !== \"\") {\r\n      quote = CardQuoteContent(card.quote, card.quoteSource);\r\n    }\r\n    return (\r\n      <li className=\"explanation\" key={id}>\r\n        <b className=\"text-lg\">{title}</b> - {card.meaning}\r\n        <br />\r\n        <span className=\"subtle\">\r\n          <b>{GamePlay[id].statement}: </b>\r\n          {GamePlay[id].label} {card.lifeExamples}.\r\n        </span>\r\n        {question}\r\n        {quote}\r\n      </li>\r\n    );\r\n  });\r\n\r\n  // Hand\r\n  const Hand = Deck.slice(0, formData.HandSize).map((card, id) => {\r\n    // console.log(card);\r\n    if (GamePlays[formData.GamePlay] === undefined) {\r\n      return;\r\n    }\r\n    let cardType = \"Back\";\r\n    cardType = GamePlay[cardCursor].statement;\r\n    cardCursor++;\r\n    return <PlayCard cardType={cardType} key={id} obj={card} />;\r\n  });\r\n\r\n  // Card Question\r\n  const DarotBoard = () => {\r\n    return (\r\n      <div className=\"Darot\">\r\n        <h2>Darot Cards Reading</h2>\r\n        <p className=\"tagline\">Situation Exploration Role Playing Game</p>\r\n        <div className=\"board\">{Hand}</div>\r\n        <h3 className=\"results\">Your Results</h3>\r\n        <div className=\"expectations\">\r\n          <ul>{Explanations}</ul>\r\n        </div>\r\n        <form className=\"controls\">\r\n          <TextField fieldName=\"GamePlay\" onChange={valueUpdated} />\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // UI\r\n  return <DarotBoard />;\r\n};\r\n\r\nexport default Darot;\r\n","import \"./css/styles.css\";\nimport \"./css/Nav.css\";\nimport { useState } from \"react\";\n// import Quotes from \"./components/Quotes\";\nimport Darot from \"./components/Darot\";\n\nconst App = () => {\n  // Form\n  const [formData, setFormData] = useState({\n    Name: \"\",\n    Location: \"\",\n    NavDarot: true\n  });\n  const valueUpdated = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Nav\n  const Nav = () => {\n    return (\n      <nav className=\"nav\">\n        <ul className=\"nav-items\">\n          <li\n            onClick={() =>\n              setFormData({ ...formData, NavDarot: !formData.NavDarot })\n            }\n          >\n            <div className=\"door\">Darot</div>\n          </li>\n          <li>\n            <div className=\"door\">End</div>\n          </li>\n        </ul>\n      </nav>\n    );\n  };\n\n  // UI\n  return (\n    <div className=\"App\">\n      <Nav />\n      {formData.NavDarot && <Darot />}\n    </div>\n  );\n\n  // Original UI\n  /*\n  return (\n    <div className=\"App\">\n      <Nav />\n      <h2>Start editing to see some magic happen!</h2>\n      <div>\n        Your name is: {formData.Name} @ {formData.Location}\n      </div>\n      <form>\n        <TextField\n          fieldName=\"Name\"\n          className=\"name_field\"\n          onChange={valueUpdated}\n        />\n        <TextField fieldName=\"Location\" onChange={valueUpdated} />\n        <TextField fieldName=\"HandSize\" onChange={valueUpdated} />\n      </form>\n      <DrawButton canDraw={canDraw} />\n      {Hand}\n    </div>\n  );\n  */\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}